.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Dist::Zilla::Plugin::Alien 3"
.TH Dist::Zilla::Plugin::Alien 3 "2014-09-14" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Dist::Zilla::Plugin::Alien \- Use Alien::Base with Dist::Zilla
.SH "VERSION"
.IX Header "VERSION"
version 0.012
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
In your \fIdist.ini\fR:
.PP
.Vb 1
\&  name = Alien\-myapp
\&
\&  [Alien]
\&  repo = http://myapp.org/releases
\&  bins = myapp myapp_helper
\&  # the following parameters are based on the dist name automatically
\&  name = myapp
\&  pattern_prefix = myapp\-
\&  pattern_version = ([\ed\e.]+)
\&  pattern_suffix = \e.tar\e.gz
\&  pattern = myapp\-([\ed\e.]+)\e.tar\e.gz
\&
\&  # commands used to build (optional)
\&  build_command = %pconfigure \-\-prefix=%s
\&  # ...
\&
\&  # commands uses to install (optional)
\&  install_command = make install
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a simple wrapper around Alien::Base, to make it very simple to
generate a distribution that uses it. You only need to make a module like
in this case Alien::myapp which extends Alien::Base and additionally a url
that points to the path where the downloadable .tar.gz of the application
or library can be found. For more informations about the parameter, please
checkout also the Alien::Base documentation. The \fIrepo\fR paramter is
automatically taken apart to supply the procotol, host and other parameters
for Alien::Base.
.PP
\&\fBWarning\fR: Please be aware that Alien::Base uses Module::Build, which
means you shouldn't have Dist::Zilla::Plugin::MakeMaker loaded. For our
case, this means, you can't just easily use it together with the common
Dist::Zilla::PluginBundle::Basic, because this includes it. As alternative
you can use Dist::Zilla::PluginBundle::Alien which is also included in this
distribution.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "repo"
.IX Subsection "repo"
The only required parameter, defines the path for the packages of the product
you want to alienfy. This must not include the filename.
.PP
To indicate a local repository use the \f(CW\*(C`file:\*(C'\fR scheme:
.PP
.Vb 2
\&   # located in the base directory
\&   repo = file:.
\&
\&   # located in the inc/ directory relative to the base
\&   repo = file:inc
.Ve
.SS "pattern"
.IX Subsection "pattern"
The pattern is used to define the filename to be expected from the repo of the
alienfied product. It is set together out of \fIpattern_prefix\fR,
\&\fIpattern_version\fR and \fIpattern_suffix\fR. \fIpattern_prefix\fR is by default
\&\*(L"name\*(R" together with a dash.
.SS "bins"
.IX Subsection "bins"
A space or tab seperated list of all binaries that should be wrapped to be executable
from the perl environment (if you use perlbrew or local::lib this also
guarantees that its available via the \s-1PATH\s0).
.SS "name"
.IX Subsection "name"
The name of the Alien package, this is used for the pattern matching filename.
If none is given, then the name of the distribution is used, but the \fIAlien\-\fR
is cut off.
.SS "build_command"
.IX Subsection "build_command"
The ordered sequence of commands used to build the distribution (passed to the
\&\f(CW\*(C`alien_build_commands\*(C'\fR option). This is optional.
.PP
.Vb 3
\&  # configure then make
\&  build_command = %pconfigure \-\-prefix=%s
\&  build_command = make
.Ve
.SS "install_command"
.IX Subsection "install_command"
The ordered sequence of commands used to install the distribution (passed to the
\&\f(CW\*(C`alien_install_commands\*(C'\fR option). This is optional.
.PP
.Vb 1
\&  install_command = make install
.Ve
.SS "isolate_dynamic"
.IX Subsection "isolate_dynamic"
If set to true, then dynamic libraries will be isolated from the static libraries
when \f(CW\*(C`install_type=share\*(C'\fR is used.  This is recommended for \s-1XS\s0 modules where
static libraries are more reliable.  Dynamic libraries (.dll, .so, etc) are still
available and can easily be used by \s-1FFI\s0 modules.
.PP
.Vb 1
\&  isolate_dynamic = 1
.Ve
.PP
Usage of this attribute will bump the requirement of Alien::Base up to 0.005
for your distribution.
.SS "autoconf_with_pic"
.IX Subsection "autoconf_with_pic"
If set to true (the default), then \f(CW\*(C`\-\-with\-pic\*(C'\fR will be passed to autoconf style
\&\f(CW\*(C`configure\*(C'\fR scripts.  This usually enables position independent code which is
desirable if you are using static libraries to build \s-1XS\s0 modules.  Usually, if the
autoconf does not recognize \f(CW\*(C`\-\-with\-pic\*(C'\fR it will ignore it, but some \f(CW\*(C`configure\*(C'\fR
scripts which are not managed by autoconf may complain and die with this option.
.PP
.Vb 2
\&  ; only if you know configure will die with \-\-with\-pic
\&  autoconf_with_pic = 0
.Ve
.PP
Usage of this attribute will bump the requirement of Alien::Base up to 0.005
for your distribution.
.SH "InstallRelease"
.IX Header "InstallRelease"
The method Alien::Base is using would compile the complete Alien 2 times, if
you use it in combination with Dist::Zilla::Plugin::InstallRelease. One time
at the test, and then again after release. With a small trick, you can avoid
this. You can use Dist::Zilla::Plugin::Run to add an additional test which
installs out of the unpacked distribution for the testing:
.PP
.Vb 2
\&  [Run::Test]
\&  run_if_release = ./Build install
.Ve
.PP
This will do the trick :). Be aware, that you need to add this plugin after
\&\fI[ModuleBuild]\fR. You can use Dist::Zilla::PluginBundle::Author::GETTY,
which directly use this trick in the right combination.
.SH "AUTHOR"
.IX Header "AUTHOR"
Torsten Raudssus <torsten@raudss.us>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2013 by Torsten Raudssus.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
